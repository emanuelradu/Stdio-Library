Radu Emanuel Ioan 336CC

Tema 2 Sisteme de operare - Bibliotecă stdio

Pentru implementarea temei am realizat un fișier header în care am definit 
structura SO_FILE cu câmpurile de mai jos, dar și câte un fișier .c pentru
fiecare funcție în parte pentru claritate și modularitate.

typedef struct _so_file {			
	int fd;							//file descriptorul fișierului

	int op;							//modul în care se deschide 									
									fișierul
	unsigned char buffer[BUF_LEN];	//bufferul în care se memorează 								
									datele citite
	char EOF;						//flag-ul care marchează 										
									sfârșitul de fișier	
	int error;						//flagul care reține dacă s-a 									
									produs o eroare
	int buffer_pos;					//poziția curentă în buffer 

	int rwf_flag;					//flag care reține ultima										
									operație care a avut loc
	int file_pos;					//poziția curentă în fișier 

	int buffer_size;				//cât am scris în buffer
} SO_FILE;

Ideea de ansamblu a temei este de a ne familiariza cu funcțiile de lucru pe 
fișiere și a înțelege cum pot fi implementate acestea pentru a fi cât mai 
eficiente. Din acest motiv s-a impus folosirea unui buffer care limitează 
apelurile de sistem, citind din fișier cât de mult îi permite mărimea atunci
când se apelează funcția 'so_fgetc.c'. Funcționalitatea principala se regăsește
în funcțiile 'so_fgetc.c' și 'so_fputc.c', 'so_fread.c' și 'so_fwrite.c' 
bazându-se pe ele.

Implementarea este destul de straight forward și ușor de înțeles. Putea fi 
implementată mai bine pentru cazul în care funcția read nu reușea să citească
atât de mult cât este dimensiunea bufferului asociat. 
Nu funcționează bine atât pentru fread cât și pentru fwrite pe testele huge_chuncked.
De asemenea, sunt ceva probleme la fflush și la ftell.

Nu implementează funcționalitatea de lucru cu procese (funcțiile f_popen și f_pclose).
Am avut ceva dificultăți atunci când am trecut pe Windows și a trebuit să adaptez 
Makefile-ul și funcțiile la sintaxa de acolo. Acesta s-a datorat faptului că nu am 
făcut prima temă și nu am o experiență mare in lucrul pe Windows.

Pentru realizarea bibliotecilor dinamice, atât pe Linux, cât și pe Windows, am utilizat
Laboratorul 1.

Materiale utilizate:
https://ocw.cs.pub.ro/courses/so/laboratoare/laborator-01
https://ocw.cs.pub.ro/courses/so/laboratoare/laborator-02
https://ocw.cs.pub.ro/courses/so/laboratoare/laborator-03
https://www.java-samples.com/showtutorial.php?tutorialid=572
http://www.c4learn.com/c-programming/c-file-structure-and-file-pointer/
http://man7.org/linux/man-pages/man2/read.2.html
http://man7.org/linux/man-pages/man2/write.2.html
http://man7.org/linux/man-pages/man2/lseek.2.html
https://docs.microsoft.com/en-us/windows/win32/fileio/opening-a-file-for-reading-or-writing