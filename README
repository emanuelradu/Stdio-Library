
Pentru implementarea temei am realizat un fișier header în care am definit 
structura SO_FILE cu câmpurile de mai jos, dar și câte un fișier .c pentru
fiecare funcție în parte pentru claritate și modularitate.

typedef struct _so_file {			
	int fd;							//file descriptorul fișierului

	int op;							//modul în care se deschide 									
									fișierul
	unsigned char buffer[BUF_LEN];	//bufferul în care se memorează 								
									datele citite
	char EOF;						//flag-ul care marchează 										
									sfârșitul de fișier	
	int error;						//flagul care reține dacă s-a 									
									produs o eroare
	int buffer_pos;					//poziția curentă în buffer 

	int rwf_flag;					//flag care reține ultima										
									operație care a avut loc
	int file_pos;					//poziția curentă în fișier 

	int buffer_size;				//cât am scris în buffer
} SO_FILE;

Ideea de ansamblu implementare funcțiilor de lucru pe 
fișiere și a înțelege cum pot fi implementate acestea pentru a fi cât mai 
eficiente. Din acest motiv s-a impus folosirea unui buffer care limitează 
apelurile de sistem, citind din fișier cât de mult îi permite mărimea atunci
când se apelează funcția 'so_fgetc.c'. Funcționalitatea principala se regăsește
în funcțiile 'so_fgetc.c' și 'so_fputc.c', 'so_fread.c' și 'so_fwrite.c' 
bazându-se pe ele.
